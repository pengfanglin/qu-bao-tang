plugins {
    id 'org.springframework.boot' version '2.1.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
}

ext {
    mapperVersion = '2.1.5'
    mybatisSpringbootStarterVersion = '2.1.0'
    pagehelperVersion = '1.2.12'
    jedisVersion = '2.10.0'
    swaggerVersion = '2.9.2'
    mysqlVersion = '8.0.11'
}

apply plugin: 'java-library'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'

def env = project.hasProperty('env') ? project.property("env") : "test"
def jarVersionSuffix = env == "pro" ? "-RELEASE" : "-SNAPSHOT"

group 'com.fanglin'
version '1.0.0'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks {
    processResources {
        from("src/main/resources")
        into("$buildDir/resources/main")
        include("application-" + env + ".yml", "**/*.xml")
        rename("application-" + env + ".yml", "application.yml")
    }
}

// JVM 版本号要求
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    maven {
        url 'http://nexus.qubaotang.cn/repository/maven-public/'
    }
    maven {
        url 'http://maven.aliyun.com/nexus/content/groups/public/'
    }
}

dependencies {
    annotationProcessor "org.projectlombok:lombok"
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
    testAnnotationProcessor "org.projectlombok:lombok"
    testAnnotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    testCompileOnly("org.projectlombok:lombok")
    api("org.projectlombok:lombok")
    compileOnly("com.fanglin:tk-mapper-generator:1.0.0")

    implementation("io.springfox:springfox-swagger2:${swaggerVersion}")
    implementation("io.springfox:springfox-swagger-ui:${swaggerVersion}")

    implementation("com.fanglin.common:common:1.0.0-RELEASE") {
        transitive false
    }
    implementation("tk.mybatis:mapper-spring-boot-starter:${mapperVersion}")
    implementation("org.mybatis.spring.boot:mybatis-spring-boot-starter:${mybatisSpringbootStarterVersion}")
    implementation("com.github.pagehelper:pagehelper-spring-boot-starter:${pagehelperVersion}")
    implementation("org.apache.httpcomponents:httpclient")
    implementation("org.springframework.boot:spring-boot-configuration-processor")
    implementation("redis.clients:jedis:${jedisVersion}")
    implementation("org.springframework.boot:spring-boot-starter-aop")
    implementation("mysql:mysql-connector-java:${mysqlVersion}")
    implementation("org.springframework.boot:spring-boot-starter-undertow") {
        exclude module: 'undertow-websockets-jsr'
    }
    implementation("org.springframework.boot:spring-boot-starter-web") {
        exclude module: 'spring-boot-starter-tomcat'
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            name = 'local'
            version += jarVersionSuffix
        }
    }
    repositories {
        maven {
            name = 'nexus'
            def releasesRepoUrl = "http://nexus.qubaotang.cn/repository/maven-releases/"
            def snapshotsRepoUrl = "http://nexus.qubaotang.cn/repository/maven-snapshots/"
            url = env == 'pro' ? releasesRepoUrl : snapshotsRepoUrl
            credentials {
                username = 'admin'
                password = "123456"
            }
        }
    }
}

//如果静态资源不单独nginx部署的话，需要开启静态资源拷贝任务，拷贝webapp目录下的资源文件
//copy {
//    CopySpec copySpec->
//        from 'src/main/webapp'
//        into "${rootDir}/build/resources/main/static"
//}